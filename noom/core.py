"""noom is python library that defines Noom datatype - an alternative to number type but with limited capabilities. This is developed as part of a learning exercise in literate programmimg - using [nbdev](https://nbdev.fast.ai) and [fastcore](https://fastcore.fast.ai). The goal here is to create a `noom` class whose objects are compatible with common arithmetic (+, -, x, /, //) and comparison(=, < , >, <=, >=) operators."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Noom']

# %% ../nbs/00_core.ipynb 4
from fastcore.foundation import patch

# %% ../nbs/00_core.ipynb 5
class Noom:
    """Noom is a number datatype alternative with limited capabilities."""
    def __init__(self, val):
        assert isinstance(val, (int, float))
        self.val = val
    
    def __repr__(self):
        return str(self.val)
    
    __str__ = __repr__


# %% ../nbs/00_core.ipynb 6
@patch
def __add__(self: Noom, oth):
    return Noom(self.val + oth.val)

# %% ../nbs/00_core.ipynb 7
@patch
def __sub__(self: Noom, oth):
    return Noom(self.val - oth.val)

# %% ../nbs/00_core.ipynb 8
@patch
def __mul__(self: Noom, oth):
    return Noom(self.val * oth.val)

# %% ../nbs/00_core.ipynb 9
@patch
def __truediv__(self: Noom, oth):
    return Noom(self.val / oth.val)

# %% ../nbs/00_core.ipynb 10
@patch
def __floordiv__(self: Noom, oth):
    return Noom(self.val // oth.val)

# %% ../nbs/00_core.ipynb 19
@patch
def __eq__(self: Noom, oth):
    return self.val == oth.val

# %% ../nbs/00_core.ipynb 31
@patch
def __lt__(self: Noom, oth):
    return self.val < oth.val

# %% ../nbs/00_core.ipynb 36
@patch
def __le__(self: Noom, oth):
    return self.val <= oth.val
